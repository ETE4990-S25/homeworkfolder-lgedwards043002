import time
import math
from multiprocessing import Process, Queue, cpu_count

def is_prime(n):
    if n <= 3:
        return n > 1
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    w = 2
    while i * i <= n:
        if n % i == 0:
            return False
        
        i += w
        w = 6 -w
    
    return True

def prime_batch_worker(start, end, result_queue):
    highest = 2
    for n in range(start, end):
        if is_prime(n):
            highest = n
    result_queue.put(highest)

if __name__ == "__main__":
    RANGE_START = 10_000_000
    RANGE_END = 20_000_000
    NUM_PROCESSES = cpu_count()

    step = (RANGE_END - RANGE_START) // NUM_PROCESSES
    q = Queue()
    processes = []

    start_time = time.time()

    for i in range(NUM_PROCESSES):
        batch_start = RANGE_START + i * step
        batch_end = batch_start + step if i < NUM_PROCESSES - 1 else RANGE_END
        p = Process(target=prime_batch_worker, args=(batch_start, batch_end, q))
        processes.append(p)
        p.start

    for p in processes:
        p.join()

    highest_primes = [q.get() for _ in range(NUM_PROCESSES)]
    elapsed = time.time() - start_time

    print(f"Fast Multi-core: {max(highest_primes):,} ({NUM_PROCESSES} cores) in {elapsed:.2f} seconds")
    




